{"version":3,"sources":["../src/index.js"],"names":["args","tableName","columnName","defaultValue","newValues","queryInterface","sequelizeOptions","enumName","transaction","replaceEnum","newSequelizeOptions","sequelize","t","newEnumName","createEnum","name","values","then","unsetDefaultValueFromEnum","setColumnTypeToEnum","dropEnum","renameEnum","oldEnumName","setColumnDefault","defaultValueType","query","getQueryToCreateEnum","join","getQueryToRemoveDefaultFromColumn","getQueryToSetEnumType","getQueryToDropEnum","getQueryToRenameEnum","getQueryToSetColumnDefault"],"mappings":"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","sourcesContent":["/**\n * Since PostgreSQL still does not support remove values from an ENUM,\n * the workaround is to create a new ENUM with the new values and use it\n * to replace the other.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {Array}  args.newValues\n * @param {Object} args.queryInterface\n * @param {String} args.enumName - Optional.\n *\n * @return {Promise}\n */\nexport default (args) => {\n  const {\n    tableName,\n    columnName,\n    defaultValue,\n    newValues,\n    queryInterface,\n    sequelizeOptions = {},\n    enumName = `enum_${tableName}_${columnName}`\n  } = args;\n\n  if (sequelizeOptions.transaction) {\n    return replaceEnum({\n      tableName,\n      columnName,\n      defaultValue,\n      newValues,\n      queryInterface,\n      newSequelizeOptions: sequelizeOptions,\n      enumName\n    });\n  } else {\n    return queryInterface.sequelize.transaction(sequelizeOptions, (t) => {\n      const newSequelizeOptions = {\n        ...(sequelizeOptions || {}),\n        transaction: t\n      };\n      return replaceEnum({\n        tableName,\n        columnName,\n        defaultValue,\n        newValues,\n        queryInterface,\n        newSequelizeOptions,\n        enumName\n      });\n    });\n  }\n};\n\n/**\n * Implementation of enum replacement.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {Array}  args.newValues\n * @param {Object} args.queryInterface\n * @param {Object} args.newSequelizeOptions\n * @param {String} args.enumName\n *\n * @return {Promise}\n */\nfunction replaceEnum(args) {\n  const {\n    tableName,\n    columnName,\n    defaultValue,\n    newValues,\n    queryInterface,\n    newSequelizeOptions,\n    enumName\n  } = args;\n\n  const newEnumName = `${enumName}_new`;\n\n  // Create a copy of the type\n  return createEnum({\n    queryInterface,\n    name: newEnumName,\n    values: newValues,\n    sequelizeOptions: newSequelizeOptions\n  })\n    // Drop default value (ALTER COLUMN cannot cast default values)\n    .then(() => defaultValue && unsetDefaultValueFromEnum({\n      queryInterface,\n      tableName,\n      columnName,\n      sequelizeOptions: newSequelizeOptions\n    }))\n    // Change column type to the new ENUM TYPE\n    .then(() => setColumnTypeToEnum({\n      tableName,\n      columnName,\n      enumName: newEnumName,\n      queryInterface,\n      sequelizeOptions: newSequelizeOptions\n    }))\n    // Drop old ENUM\n    .then(() => dropEnum(\n      {\n        name: enumName,\n        sequelizeOptions: newSequelizeOptions,\n        queryInterface\n      }\n    ))\n    // Rename new ENUM name\n    .then(() => renameEnum({\n      oldEnumName: newEnumName,\n      newEnumName: enumName,\n      queryInterface,\n      sequelizeOptions: newSequelizeOptions\n    }))\n    .then(() => defaultValue && setColumnDefault({\n      tableName,\n      columnName,\n      defaultValue,\n      defaultValueType: enumName,\n      queryInterface,\n      sequelizeOptions: newSequelizeOptions\n    }));\n}\n\n/**\n * Create a new ENUM.\n *\n * @param {Object}   args\n * @param {String}   args.name\n * @param {String[]} args.values\n * @param {Object}   args.sequelizeOptions\n * @param {Object}   args.queryInterface\n *\n * @return {Promise}\n */\nexport function createEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToCreateEnum(args.name, args.values),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Returns the query to create an Enum.\n *\n * @param {String}   name\n * @param {String[]} values\n *\n * @return {String}\n */\nexport function getQueryToCreateEnum(name, values) {\n  return `CREATE TYPE \"${name}\" AS ENUM ('${values.join('\\', \\'')}')`;\n}\n\n/**\n * Unset default value from ENUM.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {Object} args.sequelizeOptions\n * @param {Object} args.queryInterface\n *\n * @return {Promise}\n */\nexport function unsetDefaultValueFromEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRemoveDefaultFromColumn(args.tableName, args.columnName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n *\n * @return {String}\n */\nexport function getQueryToRemoveDefaultFromColumn(tableName, columnName) {\n  return `ALTER TABLE \"${tableName}\" ALTER COLUMN \"${columnName}\" DROP DEFAULT`;\n}\n\n/**\n * Set the column type to an Enum.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.enumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnTypeToEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetEnumType(args.tableName, args.columnName, args.enumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set a column type to an Enum.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} enumName\n *\n * @return {String}\n */\nexport function getQueryToSetEnumType(tableName, columnName, enumName) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        TYPE \"${enumName}\"\n        USING (\"${columnName}\"::text::\"${enumName}\")\n  `;\n}\n\n/**\n * Drop an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.name\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function dropEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToDropEnum(args.name),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop an Enum.\n *\n * @param {String} name\n *\n * @return {String}\n */\nexport function getQueryToDropEnum(name) {\n  return `DROP TYPE \"${name}\"`;\n}\n\n/**\n * Rename an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.oldEnumName\n * @param {String} args.newEnumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function renameEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRenameEnum(args.oldEnumName, args.newEnumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to rename an enum.\n *\n * @param {String} oldEnumName\n * @param {String} newEnumName\n *\n * @return {String}\n */\nexport function getQueryToRenameEnum(oldEnumName, newEnumName) {\n  return `ALTER TYPE \"${oldEnumName}\" RENAME TO \"${newEnumName}\"`;\n}\n\n/**\n * Set the default value for a column.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {String} args.defaultValueType\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnDefault(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetColumnDefault(\n      args.tableName,\n      args.columnName,\n      args.defaultValue,\n      args.defaultValueType\n    ),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set the default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} defaultValue\n * @param {String} defaultValueType\n *\n * @return {String}\n */\nexport function getQueryToSetColumnDefault(\n  tableName,\n  columnName,\n  defaultValue,\n  defaultValueType\n) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        SET DEFAULT '${defaultValue}'::\"${defaultValueType}\"\n  `;\n}\n"],"file":"index.js"}